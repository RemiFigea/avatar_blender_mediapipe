from flask import Flask, render_template, request, redirect, url_for
from flask_socketio import SocketIO
import os
import subprocess
import threading

app = Flask(__name__)
#app.config['SECRET_KEY'] = os.urandom(24)
socketio = SocketIO(app)

app.config['SERVER_NAME'] = 'localhost:5000'
app.config['APPLICATION_ROOT'] = '/'
app.config['PREFERRED_URL_SCHEME'] = 'http'

blender_process = None

OUTPUT_DIRPATH = './static'
BLENDER_EXECUTABLE_PATH = '../opt/blender/blender'
BLENDER_SCRIPT_PATH = './blender_script.py'
VIDEO_NAME = 'generated_video.mp4'

@socketio.on('message')
def handle_message(message):
    print('Recieved message', message)
    socketio.send(message)

@socketio.on('connect')
def handle_connect():
    print('Client connected')

@socketio.on('disconnect')
def handle_disconnect():
    print('Client disconnected')

@app.route('/')
def index():
    '''
    Render the video template with the video generated by Blender.
    '''
    return render_template('animation.html', video_name=VIDEO_NAME)



def run_blender_process(landmarks_filename):
    global blender_process
    
    command = [
        BLENDER_EXECUTABLE_PATH,
        '-b',
        '--python', BLENDER_SCRIPT_PATH,
        '--',
        landmarks_filename
    ]
    
    socketio.emit('message', 'Preparing Blender environment...')
    
    try:
        blender_process = subprocess.Popen(command)
        blender_process.wait()
    except Exception as e:
        socketio.emit('message', f"Blender process failed: {str(e)}")
        return

    if blender_process and blender_process.poll() is not None:
        with app.app_context():
            redirect_url = url_for('index') 
        if os.path.exists(os.path.join(OUTPUT_DIRPATH, VIDEO_NAME)):
            socketio.emit('message', f"{VIDEO_NAME} created successfully.")
            print(f"{VIDEO_NAME} created successfully.") 
            socketio.emit('redirect', redirect_url)
        else:
            socketio.emit('message', f"Error: {VIDEO_NAME} not found.")
            print(f"Error: {VIDEO_NAME} not found.")
            socketio.emit('redirect', redirect_url)

@app.route('/upload', methods=['POST'])
def upload():
    '''
    Retrieves the landmarks filename from the form. If provided, 
    runs the Blender script to generate the animation. Redirects 
    to the index page afterward.
    '''
    global blender_process

    landmarks_filename = request.form['landmarks_filename']

    if landmarks_filename:
        if blender_process and blender_process.poll() is None:
            blender_process.terminate()
            blender_process.wait()
            socketio.emit('message', 'Previous process terminated')

        thread = threading.Thread(target=run_blender_process, args=(landmarks_filename,))
        thread.start()

        return redirect(url_for('index'))
    else:
        socketio.emit('message', 'No landmarks file provided')
        return redirect(url_for('index'))

if __name__ == "__main__":
    socketio.run(app, host="0.0.0.0", port=5000, allow_unsafe_werkzeug=True)